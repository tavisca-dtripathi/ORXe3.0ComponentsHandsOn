import { _ as __assign, a as analyzeSourceFile, b as analyzeComponentDeclaration, C as CustomElementFlavor, D as DEFAULT_FEATURE_COLLECTION_CACHE } from './chunk-1f25694a.js';
export { A as ALL_COMPONENT_FEATURES, V as VERSION, a as analyzeSourceFile, t as transformAnalyzerResult } from './chunk-1f25694a.js';
import * as tsModule from 'typescript';
import { ModuleKind, ScriptTarget, createProgram, createSourceFile, ScriptKind, sys, getDefaultLibFileName } from 'typescript';
import 'ts-simple-type';

/**
 * Analyzes components in code
 * @param {IVirtualSourceFile[]|VirtualSourceFile} inputFiles
 */
function analyzeText(inputFiles) {
    var files = (Array.isArray(inputFiles) ? inputFiles : [inputFiles])
        .map(function (file) {
        return typeof file === "string"
            ? {
                text: file,
                fileName: "auto-generated-" + Math.floor(Math.random() * 100000) + ".ts",
                entry: true
            }
            : file;
    })
        .map(function (file) { return (__assign(__assign({}, file), { fileName: file.fileName })); });
    var entryFile = files.find(function (file) { return file.entry === true; }) || files[0];
    if (entryFile == null) {
        throw new ReferenceError("No entry could be found");
    }
    var readFile = function (fileName) {
        var matchedFile = files.find(function (currentFile) { return currentFile.fileName === fileName; });
        return matchedFile == null ? undefined : matchedFile.text;
    };
    var fileExists = function (fileName) {
        return files.some(function (currentFile) { return currentFile.fileName === fileName; });
    };
    var compilerOptions = {
        module: ModuleKind.ESNext,
        target: ScriptTarget.ESNext,
        allowJs: true,
        sourceMap: false
    };
    var program = createProgram({
        rootNames: files.map(function (file) { return file.fileName; }),
        options: compilerOptions,
        host: {
            writeFile: function () { },
            readFile: readFile,
            fileExists: fileExists,
            getSourceFile: function (fileName, languageVersion) {
                var sourceText = this.readFile(fileName);
                if (sourceText == null)
                    return undefined;
                return createSourceFile(fileName, sourceText, languageVersion, true, fileName.endsWith(".js") ? ScriptKind.JS : ScriptKind.TS);
            },
            getCurrentDirectory: function () {
                return ".";
            },
            getDirectories: function (directoryName) {
                return sys.getDirectories(directoryName);
            },
            getDefaultLibFileName: function (options) {
                return getDefaultLibFileName(options);
            },
            getCanonicalFileName: function (fileName) {
                return this.useCaseSensitiveFileNames() ? fileName : fileName.toLowerCase();
            },
            getNewLine: function () {
                return sys.newLine;
            },
            useCaseSensitiveFileNames: function () {
                return sys.useCaseSensitiveFileNames;
            }
        }
    });
    var checker = program.getTypeChecker();
    // Analyze the entry file
    var entrySourceFile = program.getSourceFile(entryFile.fileName);
    return {
        checker: checker,
        result: analyzeSourceFile(entrySourceFile, { checker: checker })
    };
}

/**
 * This function analyzes only the HTMLElement declaration found in "lib.dom.d.ts" source file provided by Typescript.
 * @param program
 * @param ts
 */
function analyzeHTMLElement(program, ts) {
    if (ts === void 0) { ts = tsModule; }
    var checker = program.getTypeChecker();
    var endsWithLibDom = "lib.dom.d.ts";
    var domLibSourceFile = program.getSourceFiles().find(function (sf) { return sf.fileName.endsWith(endsWithLibDom); });
    if (domLibSourceFile == null) {
        return undefined;
        //throw new Error(`Couldn't find '${endsWith}'. Have you included the 'dom' lib in your tsconfig?`);
    }
    return visit(domLibSourceFile, {
        checker: checker,
        ts: ts,
        flavors: [new CustomElementFlavor()],
        config: {
            analyzeLibDom: true
        },
        cache: {
            featureCollection: DEFAULT_FEATURE_COLLECTION_CACHE
        }
    });
}
function visit(node, context) {
    if (context.ts.isInterfaceDeclaration(node) && node.name.text === "HTMLElement") {
        return analyzeComponentDeclaration(node, context);
    }
    return node.forEachChild(function (child) {
        return visit(child, context);
    });
}

export { analyzeHTMLElement, analyzeText };
