import { AnalyzerConfig, VisibilityKind, TransformerKind } from "./chunk-96aed7e6";
interface AnalyzerCliConfig {
    debug?: boolean;
    outFile?: string;
    outDir?: string;
    format?: TransformerKind;
    discoverLibraryFiles?: boolean;
    visibility?: VisibilityKind;
    markdown?: {
        titleLevel?: number;
    };
    analyze?: AnalyzerConfig;
}
interface CliCommand {
    id: string;
    printHelp?(): Promise<void> | void;
    run(config: AnalyzerCliConfig, ...args: string[]): Promise<number | void> | number | void;
}
/**
 * A CLI command for analyzing components.
 */
declare class AnalyzeCliCommand implements CliCommand {
    id: string;
    /**
     * Prints help for this command.
     */
    printHelp(): void;
    /**
     * Runs the analyze cli command.
     * @param config
     * @param inputGlobs
     */
    run(config: AnalyzerCliConfig, ...inputGlobs: string[]): Promise<void>;
    /**
     * Analyzes input globs and returns the transformed result.
     * @param inputGlobs
     * @param config
     */
    analyze(inputGlobs: string | string[], config: AnalyzerCliConfig): Promise<string>;
    /**
     * Transforms analyze results based on the wca cli config.
     * @param results
     * @param program
     * @param config
     */
    private transformResults;
}
/**
 * The main function of the cli.
 */
declare function cli(): Promise<undefined>;
export { cli, AnalyzerCliConfig, AnalyzeCliCommand };
//# sourceMappingURL=cli.d.ts.map